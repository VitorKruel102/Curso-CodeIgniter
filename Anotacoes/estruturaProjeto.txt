// Entendendo as pastas do CodeIgniter

class App {
    private $introducao;
    private $config;
    private $controller;
    private $helpers;
    private $libraries;
    
    public funtion __construct() {
        $this->introducao = "
            Local aonde iremos desenvolver todo o projeto Web
            da nossa aplicação. É aonde fica a Estrutura MVC 
            do projeto.
        ";
    }

    public function setConfig() {
        $this->config = "
            Contém as configurações personalidas do projeto
        ";

        $pastaRoutes = "
            É aonde definimos as rotas URL's do projeto. Por exemplo:
            ---> $routes->get('/', 'Main::index');
            Onde:
                '/'   -> É caminho da URL para ser acessada;
                Main  -> É o nome do arquivo e da Class Controller;
                index -> É o metodo da class que chama a View.
        ";
    }
    public function setController() {
        $this->controller = "
            Contem as Class responsáveis por gerenciar os requests
            dos usuários e solicitar querys para o Models ou solicitar
            as views.
        ";

        $returnView() = "
            Utilizamos o return view() para solicitar a renderização
            do HTML para o usuário, essa função possuí dois parametros:
            ('pagina1', $date)
                'templates/pagina1' -> É o caminho apartir da pasta View até o arquivo HTML(.php)
                $date -> É um array onde podemos adicionar informações para
                         ser renderizado no HTML.
            Exemplo:
                $date['frase'] = "Testando Frase";
                podemos adicionar no HTML o <?=$frase?> que retornará a frase "Testando Frase"
        ";

        $metodosPublicos = "Podem ser acessados via URL, exemplo: '/Main/Metodo1'";

        $metodosPrivados = "
            Não podem ser acessados via URL, desta forma o método fica protegido
            e só poderar ser chamado dentro da classe para realizar algo especifico
            do controller.
        ";
    }

    public function setHelpers() {
        $this->helpers = "
            É um diretorio que podemos criar nossas próprias funções, porém, 
            podemos acessar funções já criadas pelo proprio FrameWork que podemos 
            utiliza-los também, para issso precisamos olhar na Documentação e 
            adiciona-lo em nossa classe. Precisamos criar um atributo: 
                protected $helpers = array('date'); // SEMPRE EM MINUSCULO

            Dentro do array adicionamos os conjuntos de funções que vamos
            utilizar.
        ";

        $criarHelpers() = "
            Para criar um helpers, precisamos criar um arquivo dentro da pasta
            seguindo uma nomenclatura:
                Matematica_helper.php (OBRIGADO ter '_helper.php' no final);
            
            Dentro do arquivo criado, iremos criar todas as funções que 
            desejamos. Para utilizar as funções bastas adicionar no
            $helpes da classe controller.
                protected $helpers = array('date', 'matamatica'); // SEMPRE EM MINUSCULO
        ";
    }

    public function setLibraries() {
        $this->libraries = "
            É um diretorio que podemos criar nossas próprias class, ou utilizar
            classes do proprio FrameWork. 
            Recomendações:
                -> Criar uma pasta para uma melhor organização;
                -> O mesmo nome do arquivo deve ser o da classe;
                -> Colocar o namespace no arquivo (namespace App\Libraries\Loja;);
                -> Adicionar o use no arquivo controller (use App\Libraries\Loja\Venda;);
                -> Agora já podemos utilizar a classe.
        ";
    }
}

class Public {
    private $introducao;
    
    public funtion __construct() {
        $this->introducao = "
            É a porta de entrada da nossa Aplicação!
            É uma aréa pouco utilizada no desenvolvimento.
        ";
    }
}

final class System {
    protected $introducao;
    
    public final funtion __construct() {
        $this->introducao = "
            É o CORE do FrameWork, 
            NUNCA DEVEREMOS MEXER NESTA PÁGINA.
        ";
    }
}

class Writable {
    private $introducao;
    
    public funtion __construct() {
        $this->introducao = "
            É utilizado quando temos em nosso aplicação uma
            funcionalide de fazer UPLOAD de arquivos de terceiros
            ou, por exemplo, registro de logs do usuário da 
            aplicação, então esse Diretório deverá ser usado para 
            guardar essas informações.
        ";
    }
}

class Env  {
    private $introducao;
    private $CLI_ENVIRONMENT;

    public funtion __construct() {
        $this->introducao = "Contem nossas variáveis de Ambiente";
    }

    public function setCLI_ENVIRONMENT() {
        $this->CLI_ENVIRONMENT = "
        
        ";
    }
}